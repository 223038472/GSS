cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

# Check ports
# Install docker

yum install docker.io -y
usermod -aG docker Rhel
systemctl restart docker
systemctl enable docker.service

#Install Kubeadm, kubelet and kubectl

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

yum update -y

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet

---------For all nodes--------


------For MASTER NODE only ------

#Switch to the root user
sudo su-
# Initialize K8s Master by executing command below

kubeadm init
#exit as root user and execute as normal CentOs user
exit
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#To verify, if kubectl is working or not, run the following command
kubectl get pods -o wide -n kube-system

#You will notice from the previous command, that all the pods are runnung except one: 'core-dns'. For resolving this, we will install a # pod network, run the following command
kubectl apply -f "https://cloud.waeve.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
Kubectl get nodes
kubectl get pods
kubectl get pods --all namespaces


----------Worker nodes only---------

#copy kubeadm join token from and execute in workser Nodes to join to cluster

# run command on master

Get token 
kubeadm token create --price-join-command

#Deploy Sample Application
Kubectl run nginx-demo --image=nginx --port=80
kubectl expose deployment nginx-demo --port=80 --type=Nodeport

#Get Node Port details
kubectl get services

#label node
kubectl label node <nodename> node-role.kubernetes.io/worker=worker
